{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { Fragment, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, NavLink, useNavigate } from \"react-router-dom\";\nimport { SaveFormLocalStorage, setFormLocalstorage } from \"../../localStore\";\nimport { validateAction } from \"../../store\";\nimport classes from \"./Login.module.scss\";\n\nfunction SignnUser() {\n  _s();\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [isEmail, setIsEmail] = useState(null);\n  const [isPassword, setIsPassword] = useState(null);\n  const {\n    enteredEmail,\n    enteredPassword,\n    isSign\n  } = useSelector(state => state.validate);\n  const arr = SaveFormLocalStorage(\"arrUser\");\n\n  const handleActiveUser = () => {\n    // if(!!SaveFormLocalStorage('arrActive') === true){\n    //   dispatch (validateAction.OnLogin(true))\n    // }\n    if (arr === null) {\n      navigate(\"/register\", {\n        replace: true\n      });\n    }\n\n    const arrActive = arr.find(item => item.email === enteredEmail && item.Password === enteredPassword);\n    const arrActiveUser = arr.find(item => item.email === enteredEmail);\n    !!arrActiveUser ? setIsEmail(false) : setIsEmail(true);\n    const arrActivePassword = arr.find(item => item.Password === enteredPassword);\n    !!arrActivePassword === true ? setIsPassword(false) : setIsPassword(true);\n    const isArr = !!arrActive;\n    console.log(isArr);\n\n    if (isArr === true) {\n      setFormLocalstorage(\"arrActive\", arrActive);\n      dispatch(validateAction.OnLogin(true));\n      navigate('/home', {\n        replace: true\n      });\n    }\n  };\n\n  return fggg;\n}\n\n_s(SignnUser, \"TPTGBeCKrOik0YGCLFhAWoJZMw0=\", false, function () {\n  return [useNavigate, useDispatch, useSelector];\n});\n\n_c = SignnUser;\nexport default SignnUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignnUser\");","map":{"version":3,"sources":["E:/Funix/NodeJs/Tanpnm_NJS_Assignment2/Front_End/src/pages/loginPage/logIn.js"],"names":["Fragment","useState","useDispatch","useSelector","Link","NavLink","useNavigate","SaveFormLocalStorage","setFormLocalstorage","validateAction","classes","SignnUser","navigate","dispatch","isEmail","setIsEmail","isPassword","setIsPassword","enteredEmail","enteredPassword","isSign","state","validate","arr","handleActiveUser","replace","arrActive","find","item","email","Password","arrActiveUser","arrActivePassword","isArr","console","log","OnLogin","fggg"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,OAAnC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,WAAxB,QAA2C,kBAA3C;AACA,SACEC,oBADF,EAEEC,mBAFF,QAGO,kBAHP;AAIA,SAASC,cAAT,QAA+B,aAA/B;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AACA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM;AAAEiB,IAAAA,YAAF;AAAgBC,IAAAA,eAAhB;AAAiCC,IAAAA;AAAjC,MAA4CjB,WAAW,CAC1DkB,KAAD,IAAWA,KAAK,CAACC,QAD0C,CAA7D;AAIA,QAAMC,GAAG,GAAGhB,oBAAoB,CAAC,SAAD,CAAhC;;AAEA,QAAMiB,gBAAgB,GAAG,MAAM;AAC7B;AAEA;AACA;AACA,QAAID,GAAG,KAAK,IAAZ,EAAkB;AAChBX,MAAAA,QAAQ,CAAC,WAAD,EAAc;AAAEa,QAAAA,OAAO,EAAE;AAAX,OAAd,CAAR;AACD;;AACD,UAAMC,SAAS,GAAGH,GAAG,CAACI,IAAJ,CACfC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAeX,YAAf,IAA+BU,IAAI,CAACE,QAAL,KAAkBX,eAD3C,CAAlB;AAGA,UAAMY,aAAa,GAAGR,GAAG,CAACI,IAAJ,CAAUC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAeX,YAAlC,CAAtB;AACA,KAAC,CAACa,aAAF,GAAkBhB,UAAU,CAAC,KAAD,CAA5B,GAAsCA,UAAU,CAAC,IAAD,CAAhD;AACA,UAAMiB,iBAAiB,GAAGT,GAAG,CAACI,IAAJ,CACvBC,IAAD,IAAUA,IAAI,CAACE,QAAL,KAAkBX,eADJ,CAA1B;AAGA,KAAC,CAACa,iBAAF,KAAwB,IAAxB,GAA+Bf,aAAa,CAAC,KAAD,CAA5C,GAAsDA,aAAa,CAAC,IAAD,CAAnE;AAEA,UAAMgB,KAAK,GAAG,CAAC,CAACP,SAAhB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AAEA,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBzB,MAAAA,mBAAmB,CAAC,WAAD,EAAckB,SAAd,CAAnB;AACAb,MAAAA,QAAQ,CAAEJ,cAAc,CAAC2B,OAAf,CAAuB,IAAvB,CAAF,CAAR;AACAxB,MAAAA,QAAQ,CAAC,OAAD,EAAS;AAACa,QAAAA,OAAO,EAAG;AAAX,OAAT,CAAR;AACD;AACF,GA1BD;;AA2BA,SACCY,IADD;AAGD;;GAzCQ1B,S;UACUL,W,EACAJ,W,EAGiCC,W;;;KAL3CQ,S;AA2CT,eAAeA,SAAf","sourcesContent":["import { Fragment, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, NavLink, useNavigate } from \"react-router-dom\";\nimport {\n  SaveFormLocalStorage,\n  setFormLocalstorage,\n} from \"../../localStore\";\nimport { validateAction } from \"../../store\";\nimport classes from \"./Login.module.scss\";\nfunction SignnUser() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [isEmail, setIsEmail] = useState(null);\n  const [isPassword, setIsPassword] = useState(null);\n  const { enteredEmail, enteredPassword, isSign } = useSelector(\n    (state) => state.validate\n  );\n\n  const arr = SaveFormLocalStorage(\"arrUser\");\n\n  const handleActiveUser = () => {\n    // if(!!SaveFormLocalStorage('arrActive') === true){\n\n    //   dispatch (validateAction.OnLogin(true))\n    // }\n    if (arr === null) {\n      navigate(\"/register\", { replace: true });\n    }\n    const arrActive = arr.find(\n      (item) => item.email === enteredEmail && item.Password === enteredPassword\n    );\n    const arrActiveUser = arr.find((item) => item.email === enteredEmail);\n    !!arrActiveUser ? setIsEmail(false) : setIsEmail(true);\n    const arrActivePassword = arr.find(\n      (item) => item.Password === enteredPassword\n    );\n    !!arrActivePassword === true ? setIsPassword(false) : setIsPassword(true);\n\n    const isArr = !!arrActive;\n    console.log(isArr);\n\n    if (isArr === true) {\n      setFormLocalstorage(\"arrActive\", arrActive);\n      dispatch (validateAction.OnLogin(true))\n      navigate('/home',{replace : true})\n    }\n  };\n  return (\n   fggg\n  );\n}\n\nexport default SignnUser;\n"]},"metadata":{},"sourceType":"module"}