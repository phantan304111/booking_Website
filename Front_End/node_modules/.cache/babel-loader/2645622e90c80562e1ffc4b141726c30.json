{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\n\nfunction useHttpRequest() {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isdata, setData] = useState(null);\n  const SendRequest = useCallback(async requestConfig => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig);\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      setData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    SendRequest();\n  }, [SendRequest]);\n  return {\n    isLoading: isLoading,\n    error: error,\n    data: isdata,\n    SendRequest: SendRequest\n  };\n}\n\n_s(useHttpRequest, \"QLHsHYgXRHKruXwkDMiZrA0nhhY=\");\n\nexport default useHttpRequest; // import { useCallback, useState, useEffect } from \"react\";\n// function useHttpRequest() {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError]= useState(null);\n//   const [isData, setData] = useState(null);\n//   const SendRequest = useCallback(async (requestConfig)=>{\n//     setIsLoading(true);\n//     setError(null);\n//     try{\n//       const response = await fetch(requestConfig);\n//       if(!response.ok){\n//         throw new Error('request failed');\n//       }\n//       const data = await response.json();\n//       setData(data)\n//     }catch(err)\n//     {\n//       setError(err.message || 'something went wrong!');\n//     }\n//     setIsLoading = false;\n//   },[]);\n//   useEffect(()=>{\n//     SendRequest();\n//   },[SendRequest])\n//   return {isLoading: isLoading, error:error, data:isData, SendRequest:SendRequest};\n// }\n// export default useHttpRequest;","map":{"version":3,"sources":["E:/Funix/NodeJs/Tanpnm_NJS_Assignment2/Front_End/src/hookcostun/httpRequest.js"],"names":["useCallback","useEffect","useState","useHttpRequest","isLoading","setIsLoading","error","setError","isdata","setData","SendRequest","requestConfig","response","fetch","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;;AAEA,SAASC,cAAT,GAA0B;AAAA;;AACxB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AACF,QAAM,CAACM,MAAD,EAAQC,OAAR,IAAmBP,QAAQ,CAAC,IAAD,CAAjC;AACE,QAAMQ,WAAW,GAAGV,WAAW,CAAE,MAAOW,aAAP,IAAyB;AACxDN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAD,CAA5B;;AACA,UAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAR,MAAAA,OAAO,CAACO,IAAD,CAAP;AACD,KAPD,CAOE,OAAOE,GAAP,EAAY;AACZX,MAAAA,QAAQ,CAACW,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDd,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAd8B,EAc7B,EAd6B,CAA/B;AAgBAJ,EAAAA,SAAS,CAAE,MAAK;AACdS,IAAAA,WAAW;AACZ,GAFQ,EAEP,CAACA,WAAD,CAFO,CAAT;AAGA,SAAO;AAAEN,IAAAA,SAAS,EAAEA,SAAb;AAAwBE,IAAAA,KAAK,EAAEA,KAA/B;AAAqCU,IAAAA,IAAI,EAAGR,MAA5C;AAAoDE,IAAAA,WAAW,EAAGA;AAAlE,GAAP;AACD;;GAxBQP,c;;AAyBT,eAAgBA,cAAhB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nfunction useHttpRequest() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\nconst [isdata,setData] = useState(null)\n  const SendRequest = useCallback( async (requestConfig) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig);\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n      const data = await response.json();\n      setData(data)\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  },[])\n\n  useEffect (()=> {\n    SendRequest()\n  },[SendRequest])\n  return { isLoading: isLoading, error: error,data : isdata ,SendRequest : SendRequest};\n}\nexport default  useHttpRequest;\n\n// import { useCallback, useState, useEffect } from \"react\";\n// function useHttpRequest() {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError]= useState(null);\n//   const [isData, setData] = useState(null);\n//   const SendRequest = useCallback(async (requestConfig)=>{\n//     setIsLoading(true);\n//     setError(null);\n//     try{\n//       const response = await fetch(requestConfig);\n//       if(!response.ok){\n//         throw new Error('request failed');\n//       }\n//       const data = await response.json();\n//       setData(data)\n\n//     }catch(err)\n//     {\n//       setError(err.message || 'something went wrong!');\n//     }\n//     setIsLoading = false;\n//   },[]);\n//   useEffect(()=>{\n//     SendRequest();\n//   },[SendRequest])\n//   return {isLoading: isLoading, error:error, data:isData, SendRequest:SendRequest};\n\n// }\n// export default useHttpRequest;"]},"metadata":{},"sourceType":"module"}