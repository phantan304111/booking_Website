{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { SaveFormLocalStorage, setFormLocalstorage } from \"../LocalStorage/localStore\"; //////\n\nexport const CartItemSlice = createSlice({\n  name: \"CartItem\",\n  initialState: {\n    products: [],\n    quantity: 1,\n    totalPrice: 0\n  },\n  reducers: {\n    addIncrement(state, action) {\n      console.log(action.payload);\n      let arrProducts = SaveFormLocalStorage(\"arrProducts\");\n      state.quantity++;\n\n      if (typeof action.payload === \"number\") {\n        const newItem = action.payload;\n        const existing = arrProducts.findIndex((item, index) => index === newItem);\n\n        if (typeof existing === \"number\") {\n          arrProducts[existing].quantity++;\n          arrProducts[existing].total = parseInt(arrProducts[existing].total) + parseInt(arrProducts[existing].price);\n          state.products = [...arrProducts]; // console.log(state.products);\n\n          setFormLocalstorage(\"arrProducts\", state.products);\n        }\n      }\n    },\n\n    decrement(state, action) {\n      let arrProducts = SaveFormLocalStorage(\"arrProducts\");\n\n      if (state.quantity > 1) {\n        state.quantity = state.quantity - 1;\n      }\n\n      if (typeof action.payload === \"number\") {\n        const newItem = action.payload;\n        const existing = arrProducts.findIndex((item, index) => index === newItem);\n\n        if (arrProducts[existing].quantity > 0) {\n          console.log(true);\n          arrProducts[existing].quantity--;\n          arrProducts[existing].total = parseInt(arrProducts[existing].total) - parseInt(arrProducts[existing].price);\n          state.products = [...arrProducts]; // console.log(state.products);\n\n          setFormLocalstorage(\"arrProducts\", state.products);\n        } else {\n          state.products = [...arrProducts];\n          state.products.splice(existing, 1);\n          setFormLocalstorage(\"arrProducts\", state.products);\n        }\n      }\n    },\n\n    DeleteProduct(state, action) {\n      console.log(action.payload);\n      const newItem = action.payload;\n      const existing = state.products.findIndex(item => item === newItem);\n\n      if (existing) {\n        if (existing) {\n          const newItem = state.products;\n          newItem.splice(existing, 1);\n        }\n\n        setFormLocalstorage(\"arrProducts\", state.products);\n      }\n    },\n\n    addToCart(state, action) {\n      console.log(action.payload);\n      let arrProducts = SaveFormLocalStorage(\"arrProducts\");\n      console.log(!!arrProducts);\n      const newItem = action.payload;\n      const existing = !!arrProducts === false ? state.products.find(item => item.id === newItem.id) : arrProducts.find(item => item.id === newItem.id);\n      console.log(existing);\n\n      if (existing) {\n        existing.quantity = existing.quantity + action.payload.quantity;\n        existing.total = parseInt(existing.total) + parseInt(action.payload.price) * action.payload.quantity;\n        setFormLocalstorage(\"arrProducts\", state.products);\n      } else {\n        // const newarr = state.products = [...arrProducts];\n        console.log(!!arrProducts === true ? state.products = [...arrProducts] : state.products);\n        (!!arrProducts === true ? state.products = [...arrProducts] : state.products).push({\n          id: newItem.id,\n          quantity: newItem.quantity,\n          price: newItem.price,\n          total: newItem.price * newItem.quantity,\n          name: newItem.name,\n          img: newItem.img\n        });\n        setFormLocalstorage(\"arrProducts\", state.products);\n      }\n    },\n\n    addLocalStorage(state, action) {}\n\n  }\n}); // import { createSlice } from \"@reduxjs/toolkit\";\n// import { SaveFormLocalStorage } from \"../LocalStorage/localStore\";\n// import { setFormLocalstorage } from \"../LocalStorage/localStore\";\n// export const CartItemSlice2 = createSlice({\n//   name:\"CartItem\",\n//   initialState:{\n//     products:[],\n//     quantity:1,\n//     totalPrice:0,\n//   },\n//   reducers:{\n//     addIncrement(state, action){\n//       let arrProducts = SaveFormLocalStorage(\"arrProducts\");\n//       state.quantity++;\n//       if(typeof action.payload === 'number'){\n//         const newItem = action.payload;\n//         const existing =  arrProducts.findIndex((items,index)=>{index === newItem});////ham findindex tim tat ca phan tu trong mang thoa man ham tham so\n//       if (typeof existing === \"number\") {\n//           arrProducts[existing].quantity++;\n//           arrProducts[existing].total =\n//             parseInt(arrProducts[existing].total) +\n//             parseInt(arrProducts[existing].price);\n//           state.products = [...arrProducts];\n//           // console.log(state.products);\n//           setFormLocalstorage(\"arrProducts\", state.products);\n//         }\n//       }\n//     }\n//   }\n// })","map":{"version":3,"sources":["E:/Funix/NodeJs/Tanpnm_NJS_Assignment2/Front_End/src/store/CartSlice.js"],"names":["createSlice","SaveFormLocalStorage","setFormLocalstorage","CartItemSlice","name","initialState","products","quantity","totalPrice","reducers","addIncrement","state","action","console","log","payload","arrProducts","newItem","existing","findIndex","item","index","total","parseInt","price","decrement","splice","DeleteProduct","addToCart","find","id","push","img","addLocalStorage"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  SaveFormLocalStorage,\n  setFormLocalstorage,\n} from \"../LocalStorage/localStore\";\n//////\n\n\n\n\nexport const CartItemSlice = createSlice({\n  name: \"CartItem\",\n  initialState: {\n    products: [],\n    quantity: 1,\n    totalPrice: 0,\n  },\n  reducers: {\n    addIncrement(state, action) {\n      console.log(action.payload);\n      let arrProducts = SaveFormLocalStorage(\"arrProducts\");\n      state.quantity++;\n\n      if (typeof action.payload === \"number\") {\n        const newItem = action.payload;\n\n        const existing = arrProducts.findIndex(\n          (item, index) => index === newItem\n        );\n\n        if (typeof existing === \"number\") {\n          arrProducts[existing].quantity++;\n          arrProducts[existing].total =\n            parseInt(arrProducts[existing].total) +\n            parseInt(arrProducts[existing].price);\n\n          state.products = [...arrProducts];\n          // console.log(state.products);\n          setFormLocalstorage(\"arrProducts\", state.products);\n        }\n      }\n    },\n    decrement(state, action) {\n      let arrProducts = SaveFormLocalStorage(\"arrProducts\");\n      if (state.quantity > 1) {\n        state.quantity = state.quantity - 1;\n      }\n\n      if (typeof action.payload === \"number\") {\n        const newItem = action.payload;\n\n        const existing = arrProducts.findIndex(\n          (item, index) => index === newItem\n        );\n\n        if (arrProducts[existing].quantity > 0) {\n          console.log(true);\n          arrProducts[existing].quantity--;\n          arrProducts[existing].total =\n            parseInt(arrProducts[existing].total) -\n            parseInt(arrProducts[existing].price);\n\n          state.products = [...arrProducts];\n\n          // console.log(state.products);\n          setFormLocalstorage(\"arrProducts\", state.products);\n        } else {\n          state.products = [...arrProducts];\n          state.products.splice(existing, 1);\n          setFormLocalstorage(\"arrProducts\", state.products);\n        }\n      }\n    },\n    DeleteProduct(state, action) {\n      console.log(action.payload);\n\n      const newItem = action.payload;\n\n      const existing = state.products.findIndex((item) => item === newItem);\n      if (existing) {\n        if (existing) {\n          const newItem = state.products;\n          newItem.splice(existing, 1);\n        }\n        setFormLocalstorage(\"arrProducts\", state.products);\n      }\n    },\n    addToCart(state, action) {console.log(action.payload);\n      let arrProducts = SaveFormLocalStorage(\"arrProducts\");\n   console.log(!!arrProducts);\n      const newItem = action.payload;\n\n      const existing = !!arrProducts === false ? state.products.find((item) => item.id === newItem.id) : \n      arrProducts.find((item) => item.id === newItem.id) \n      console.log(existing);\n\n      if (existing) {\n       \n        existing.quantity = existing.quantity + action.payload.quantity;\n        existing.total =\n          parseInt(existing.total) +\n          parseInt(action.payload.price) * action.payload.quantity;\n\n        setFormLocalstorage(\"arrProducts\", state.products);\n      } else {\n        // const newarr = state.products = [...arrProducts];\n  console.log(\n    (!!arrProducts ===true ? state.products = [...arrProducts]: state.products));\n      \n\n       (!!arrProducts ===true ? state.products = [...arrProducts]: state.products).push({\n          id: newItem.id,\n          quantity: newItem.quantity,\n          price: newItem.price,\n          total: newItem.price * newItem.quantity,\n          name: newItem.name,\n          img: newItem.img,\n        });\n\n        setFormLocalstorage(\"arrProducts\", state.products);\n      }\n    },\n    addLocalStorage(state, action) {},\n  },\n});\n\n\n// import { createSlice } from \"@reduxjs/toolkit\";\n// import { SaveFormLocalStorage } from \"../LocalStorage/localStore\";\n// import { setFormLocalstorage } from \"../LocalStorage/localStore\";\n// export const CartItemSlice2 = createSlice({\n//   name:\"CartItem\",\n//   initialState:{\n//     products:[],\n//     quantity:1,\n//     totalPrice:0,\n\n//   },\n//   reducers:{\n//     addIncrement(state, action){\n//       let arrProducts = SaveFormLocalStorage(\"arrProducts\");\n//       state.quantity++;\n//       if(typeof action.payload === 'number'){\n//         const newItem = action.payload;\n//         const existing =  arrProducts.findIndex((items,index)=>{index === newItem});////ham findindex tim tat ca phan tu trong mang thoa man ham tham so\n//       if (typeof existing === \"number\") {\n//           arrProducts[existing].quantity++;\n//           arrProducts[existing].total =\n//             parseInt(arrProducts[existing].total) +\n//             parseInt(arrProducts[existing].price);\n\n//           state.products = [...arrProducts];\n//           // console.log(state.products);\n//           setFormLocalstorage(\"arrProducts\", state.products);\n//         }\n//       }\n//     }\n//   }\n// })"]},"metadata":{},"sourceType":"module"}